# ABOUT REGULAR EXPRESSIONS

Regular expressions can be used in any stringr function in a pattern argument

# Lecture 1
library(rebus)
library(stringr)
# Some strings to practice with
x <- c("cat", "coat", "scotland", "tic toc")
# Print END
END
# Run me
str_view(x, pattern = START %R% "c")
# Match the strings that start with "co" 
str_view(x, pattern = START %R% "co")
# Match the strings that end with "at"
str_view(x, pattern =  "at" %R% END)
# Match the strings that is exactly "cat"
str_view(x, pattern = START %R% "cat" %R%  END)

# Lecture 2
x <- c("cat", "coat", "scotland", "tic toc")
# Match any character followed by a "t"
str_view(x, pattern = ANY_CHAR %R% "t")
# Match a "t" followed by any character
str_view(x, pattern = "t" %R% ANY_CHAR)
# Match two characters
str_view(x, pattern = ANY_CHAR %R% ANY_CHAR)
# Match a string with exactly three characters
str_view(x, pattern = START %R% ANY_CHAR %R% ANY_CHAR %R% ANY_CHAR %R% END)

# Lecture 3
# q followed by any character
pattern <- "q" %R% ANY_CHAR
# Test pattern 
str_view(c("Quentin", "Kaliq", "Jacques",  "Jacqes"), pattern)  
# Find names that have the pattern
names_with_q <- str_subset(boy_names, pattern = pattern)
length(names_with_q)
# Find part of name that matches pattern
part_with_q <- str_extract(boy_names, pattern = pattern)
table(part_with_q) #qa qe qi qm qo qu // 1  1  2  2  1 89
# Did any names have the pattern more than once?
count_of_q <- str_count(boy_names, pattern = pattern)
table(count_of_q)
# Which babies got these names?
with_q <- str_detect(boy_names, pattern = pattern)
# What fraction of babies got these names?
mean(with_q)

# Lecture 4
# Match Jeffrey or Geoffrey
whole_names <- or("Jeffrey", "Geoffrey")
str_view(boy_names, pattern = whole_names,   match = TRUE)
# Match Jeffrey or Geoffrey, another way
common_ending <- or("Je", "Geo") %R% "ffrey"
str_view(boy_names, pattern = common_ending,   match = TRUE)
# Match with alternate endings
by_parts <- or("Je", "Geo") %R% "ff" %R% or("ry", "ery", "rey", "erey")
str_view(boy_names,   pattern = by_parts,   match = TRUE)
# Match names that start with Cath or Kath
ckath <- START %R% or("C", "K") %R% "ath"
str_view(girl_names, pattern = ckath, match = TRUE)

# Lecture 5
# Create character class containing vowels
vowels <- char_class("Aa", "Ee", "Ii", "Oo", "Uu")
# Print vowels
vowels
# See vowels in x with str_view()
x # [1] "grey sky"      "gray elephant"
str_view(x, pattern = vowels)
# See vowels in x with str_view_all()
str_view_all(x, pattern = vowels)
# Number of vowels in boy_names
num_vowels <- str_count(boy_names, pattern = vowels)
mean(num_vowels)
# Proportion of vowels in boy_names
name_length <- str_length(boy_names)
mean(num_vowels/name_length)

# Lecture 6
# Vowels from last exercise
vowels <- char_class("aeiouAEIOU")
# Use `negated_char_class()` for everything but vowels
not_vowels <- negated_char_class("aeiouAEIOU")
# See names with only vowels
str_view(boy_names,   pattern = START %R% one_or_more(vowels) %R% END,   match = TRUE)
# See names with no vowels
str_view(boy_names,   pattern = START %R% one_or_more(not_vowels) %R% END,   match = TRUE)

# Lecture 7
# Take a look at ALL digits
str_view_all(contact, pattern = DGT)
# Create a three digit pattern and test
three_digits <- DGT %R% DGT %R% DGT
str_view_all(contact,  pattern = three_digits)
# Create four digit pattern
four_digits <- three_digits %R% DGT
# Create a separator pattern and test
separator <-  char_class("-.() ")
str_view_all(contact,  pattern = separator)
# Create phone pattern
phone_pattern <- optional(OPEN_PAREN) %R%
                 three_digits %R%  
                 one_or_more(separator) %R%
                 three_digits %R%   
                 one_or_more(separator) %R% 
                 four_digits      
# Test pattern
str_view(contact, pattern = phone_pattern)
# Extract phone numbers
str_extract(contact, pattern = phone_pattern)
# Extract ALL phone numbers
str_extract_all(contact, pattern = phone_pattern)

# Lecture 8
# Look for two digits
str_view(narratives, pattern = DGT %R% DGT)
# Pattern to match one or two digits
age <- one_or_more(DGT)
str_view(narratives,   pattern = age)
# Pattern to match units 
unit <- optional(SPC) %R% or("YO", "YR", "MO")
# Test pattern with age then units
str_view(narratives,   pattern = age %R% unit)
# Pattern to match gender
gender <- optional(SPC) %R% or("M", "F")
# Test pattern with age then units then gender
str_view(narratives,   pattern = age %R% unit %R% gender)
# Extract age_gender, take a look
age_gender <- str_extract(narratives, age %R% unit %R% gender)
age_gender
